.. module:: calculators.siesta

======
SIESTA
======

Introduction
============

SIESTA_ is a density-functional theory code for very large systems
based on atomic orbital (LCAO) basis sets.


.. _SIESTA: http://www.uam.es/departamentos/ciencias/fismateriac/siesta/



Environment variables
=====================

You need to write a script called :file:`run_siesta.py` containing
something like this::

  import os
  siesta = 'siesta_2.0'
  exitcode = os.system('%s < %s.fdf > %s.txt' % (siesta, label, label))

The environment variable :envvar:`SIESTA_SCRIPT` must point to that file.

A directory containing the pseudopotential files :file:`.vps` is also
needed, and it is to be put in the environment variable
:envvar:`SIESTA_PP_PATH`.

Set both environment variables in your in your shell configuration file:

.. highlight:: bash
 
::

  $ export SIESTA_SCRIPT=$HOME/siesta/run_siesta.py
  $ export SIESTA_PP_PATH=$HOME/mypps

.. highlight:: python



SIESTA Calculator
================= 

The default parameters are very close to those that the SIESTA Fortran
code uses.  These are the exceptions:

.. class:: Siesta(label='siesta', xc='LDA', pulay=5, mix=0.1)
    
Here is a detailed list of all the keywords for the calculator:

============== ========= ============= =====================================
keyword        type      default value description
============== ========= ============= =====================================
``kpts``       ``list``  ``[1,1,1]``   Monkhorst-Pack k-point sampling
``nbands``     ``int``   ``None``      Number of bands 
``meshcutoff`` ``float`` ``None``      Mesh cut-off energy in eV 
``basis``      ``str``   ``None``      Type of basis set ('sz', 'dz', 'szp',
                                       'dzp') 
``xc``         ``str``   ``'LDA'``     Exchange-correlation functional.
``pulay``      ``int``   ``5``         Number of old densities to use for
                                       Pulay mixing
``mix``        ``float`` ``0.1``       Pulay mixing weight 
``width``      ``float`` ``None``      Fermi-distribution width in eV
``charge``     ``float`` ``None``      Total charge of the system
``label``      ``str``   ``'siesta'``  Name of the output file
============== ========= ============= =====================================

A value of ``None`` means that SIESTA's default value is used.



Extra FDF parameters
====================

The SIESTA code reads the input parameters for any calculation from a 
:file:`.fdf` file. This means that you can set parameters by manually setting 
entries in this input :file:`.fdf` file. This is done by the syntax:

>>> calc.set_fdf('name_of_the_entry', value)

For example, the ``EnergyShift`` can be set using

>>> calc.set_fdf('PAO.EnergyShift', 0.01 * Rydberg)

The complete list of the FDF entries can be found in the official `SIESTA
manual`_.

.. _SIESTA manual: http://www.uam.es/departamentos/ciencias/fismateriac/siesta



Customized basis-set
====================

Standard basis sets can be set by the keyword ``basis`` directly
in the Siesta calculator object. If a customized basis is needed, it 
can be set as a FDF entry, as explained in the previous section.

As an example, we generate a triple-zeta triple-polarized (TZTP)
basis for Au. Since the valence states are 6s and 5d, we will have
3 zeta orbitals for l=0 and 3 for l=2 plus 3 polarization orbitals
for l=1. The basis can be defined by

**XXX I don't think this works!**

>>> value = [['Au',2,'split',0.00],  #label, num. of l-shells,type,charge
>>>         [0,3,'P',3],             #l,nzeta,'P'(opt):pol.functions,npolzeta
>>>         [0.00,0.00,0.00],        #rc of basis functions for each zeta function
>>>                                  #0.00  => rc determined by PAO.EnergyShift
>>>         [2,3],                   #l,nzeta
>>>         [0.00,0.00,0.00]]        #rc

>>> calc.set_fdf('PAO.Basis',value=value)


Pseudopotentials
================

Pseudopotential files in the ``.psf`` or ``.vps`` formats are needed. 
Pseudopotentials generated from the ABINIT code and converted to 
the SIESTA format are available in the `SIESTA`_ website . A database of user 
contributed pseudopotentials is also available there.

.. _generator: http://www.tddft.org/programs/octopus/wiki/index.php/Pseudopotentials

You can also find an on-line pseudopotential `generator`_ from the
OCTOPUS code.



Example
=======

Here is an example of how to calculate the total energy for bulk Silicon,
using a double-zeta basis generated by specifying a given energy-shift::
        
  from ase import *
  
  a0 = 5.43
  bulk = Atoms([Atom('Si', (0,    0,     0)),
                Atom('Si', (0.25, 0.25, 0.25))],
               pbc=True)
  b = a0 / 2
  bulk.set_cell([(0, b, b),
                 (b, 0, b),
                 (b, b, 0)], move_atoms=True)
  
  calc = Siesta(label='Si',
                xc='PBE',
                meshcutoff=200 * Ry,
                basis='dz',
                mix=0.01,
                kpts=[10, 10, 10])
   
  calc.set_fdf('PAO.EnergyShift', 0.01 * Ry)
  bulk.set_calculator(calc)
  e = bulk.get_potential_energy()
